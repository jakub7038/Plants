// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Plants.Data;

#nullable disable

namespace Plants.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250515210235_init_fixes")]
    partial class init_fixes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Plants.Models.CareLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CareDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<double>("GrowthMeasurementCm")
                        .HasColumnType("double precision");

                    b.Property<int>("HealthStatus")
                        .HasColumnType("integer");

                    b.Property<double>("HumidityAtCare")
                        .HasColumnType("double precision");

                    b.Property<string>("ObservedProblems")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<byte[]>("Photo")
                        .HasMaxLength(1048576)
                        .HasColumnType("bytea");

                    b.Property<int>("PlantId")
                        .HasColumnType("integer");

                    b.Property<double>("TemperatureAtCare")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.ToTable("CareLogs");
                });

            modelBuilder.Entity("Plants.Models.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SpeciesId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("Plants.Models.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IdealHumidity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdealTemperature")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Species");
                });

            modelBuilder.Entity("Plants.Models.CareLog", b =>
                {
                    b.HasOne("Plants.Models.Plant", "Plant")
                        .WithMany("CareLogs")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Plants.Models.Plant", b =>
                {
                    b.HasOne("Plants.Models.Species", "Species")
                        .WithMany("Plants")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Species");
                });

            modelBuilder.Entity("Plants.Models.Plant", b =>
                {
                    b.Navigation("CareLogs");
                });

            modelBuilder.Entity("Plants.Models.Species", b =>
                {
                    b.Navigation("Plants");
                });
#pragma warning restore 612, 618
        }
    }
}
